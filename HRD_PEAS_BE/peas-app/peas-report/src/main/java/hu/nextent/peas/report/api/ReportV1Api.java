/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package hu.nextent.peas.report.api;

import hu.nextent.peas.model.ErrorMessageModel;
import hu.nextent.peas.model.ReportAllEmployeePageModel;
import hu.nextent.peas.model.ReportAllEmployeeQueryParameterModel;
import hu.nextent.peas.model.ReportEmployee;
import hu.nextent.peas.model.ReportEmployeeQueryModel;
import hu.nextent.peas.model.ReportEvaluationModel;
import hu.nextent.peas.model.ReportPeriodListModel;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@Api(value = "report_v1", description = "the report_v1 API")
public interface ReportV1Api {

    Logger log = LoggerFactory.getLogger(ReportV1Api.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }
	

    @ApiOperation(value = "Aktív, minősítés alatt és lezárt periódusok lekérdezése", nickname = "queryPeriod", notes = "Periódusok lekérdezése endDate szerint csökkenő sorrendben.", response = ReportPeriodListModel.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "report", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Periódusok lekérdezése", response = ReportPeriodListModel.class),
        @ApiResponse(code = 204, message = "Nincs válasz"),
        @ApiResponse(code = 200, message = "Általános hibaüzenet", response = ErrorMessageModel.class) })
    @RequestMapping(value = "/report_v1/period_v1",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ReportPeriodListModel> queryPeriod() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\r\n  \"name\" : \"2018/1\",\r\n  \"id\" : 342342\r\n}, {\r\n  \"name\" : \"2018/1\",\r\n  \"id\" : 342342\r\n} ]", ReportPeriodListModel.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ReportV1Api interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Összes dolgozó riport", nickname = "reportAllEmployee", notes = "Adott periódusban a belépett felhasználó által elérhető felhasználók és vezetők pontszámai és csoportpontjai.      Ellenőrzés:   - Csak aktív, minősítés alatt és lezárt periódus lehet.    Működés:   - Riport visszaadása.", response = ReportAllEmployeePageModel.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "report", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Összes dolgozó riport", response = ReportAllEmployeePageModel.class),
        @ApiResponse(code = 404, message = "Általános hibaüzenet", response = ErrorMessageModel.class),
        @ApiResponse(code = 200, message = "Általános hibaüzenet", response = ErrorMessageModel.class) })
    @RequestMapping(value = "/report_v1/employees_v1",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<ReportAllEmployeePageModel> reportAllEmployee(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ReportAllEmployeeQueryParameterModel body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", ReportAllEmployeePageModel.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ReportV1Api interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Dolgozó riport", nickname = "reportEmployee", notes = "Adott periódus adott felhasználó részletei és feladatainak riportja.      Paraméterezése:   - vagy userId és periodId   - vagy ratingId  Ellenőrzés:   - Csak aktív, minősítés alatt és lezárt periódus lehet.   - Csak a belépett felhasználó által látható felhasználó lehet.     - HR szerepkör minden felhasználót láthat.     - Vezető szerepkör saját magát és az általa vezetett csoport összes felhasználóját alcsoportokkal együtt.     - User szerepkör csak saját magát.  Működés:   - Felhasználó, vezetője, csoportja, pont, vezetőként csoportja, csoport átlag   - Céges átlag   - Vezetői periódus minősítés adatai.   - Feladatok adatai.", response = ReportEmployee.class, tags={ "report", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Dolgozói riport", response = ReportEmployee.class),
        @ApiResponse(code = 404, message = "Általános hibaüzenet", response = ErrorMessageModel.class),
        @ApiResponse(code = 200, message = "Általános hibaüzenet", response = ErrorMessageModel.class) })
    @RequestMapping(value = "/report_v1/employee_v1",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<ReportEmployee> reportEmployee(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ReportEmployeeQueryModel body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"organizationScoreAvg\" : 5.637376656633329,\r\n  \"companyScoreAvg\" : 2.3021358869347655,\r\n  \"textualEvaluation\" : \"textualEvaluation\",\r\n  \"normalTasksScoreAvg\" : 6.027456183070403,\r\n  \"employee\" : {\r\n    \"mode\" : \"normal\",\r\n    \"organization\" : \"Alkalmazás fejlesztés\",\r\n    \"active\" : true,\r\n    \"fullName\" : \"fullName\",\r\n    \"id\" : 342342,\r\n    \"userName\" : \"userName\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"asLeaderOrganizationScore\" : 5.962133916683182,\r\n  \"score\" : 0.8008281904610115,\r\n  \"gradeRecommendation\" : \"gradeRecommendation\",\r\n  \"automaticTaskScore\" : 1.4658129805029452,\r\n  \"asLeaderOrganization\" : \"asLeaderOrganization\",\r\n  \"tasks\" : [ \"\", \"\" ],\r\n  \"cooperation\" : true\r\n}", ReportEmployee.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ReportV1Api interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Feladat értékelés riport", nickname = "reportEvaluation", notes = "Adott feladat részleteinek és értékeléseinek a riportja.      Ellenőrzés:   - Csak a belépett felhasználó által látható feladat lehet.     - HR szerepkör minden feladatot láthat.     - Vezető szerepkör saját és az általa vezetett csoport összes feladatot alcsoportokkal együtt.     - User szerepkör csak saját feladatot.    Működés:   - A felhasználó saját feladata anonimizálva kerül visszaadásra (az értékelők neve nélkül).   - Felhasználó, vezetője, csoportja, pont, vezetőként csoportja, csoport átlag   - Céges átlag   - Vezetői periódus minősítés adatai.   - Feladat adatai.   - A feladat értékelési szempontjai.   - A feladat értékelői által adott válaszok pontszámai értékelési szempontonként.   - Szöveges értékelések.   - Összátlagok.", response = ReportEvaluationModel.class, tags={ "report", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Feladat értékelés riport", response = ReportEvaluationModel.class),
        @ApiResponse(code = 404, message = "Általános hibaüzenet", response = ErrorMessageModel.class),
        @ApiResponse(code = 200, message = "Általános hibaüzenet", response = ErrorMessageModel.class) })
    @RequestMapping(value = "/report_v1/evaluation_v1/{taskId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<ReportEvaluationModel> reportEvaluation(@ApiParam(value = "Task azonosító",required=true) @PathVariable("taskId") Long taskId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"organizationScoreAvg\" : 5.637376656633329,\r\n  \"period\" : {\r\n    \"ratingEndDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"name\" : \"name\",\r\n    \"id\" : 342342,\r\n    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"status\" : \"ACTIVE\"\r\n  },\r\n  \"companyScoreAvg\" : 2.3021358869347655,\r\n  \"textualEvaluation\" : \"textualEvaluation\",\r\n  \"normalTasksScoreAvg\" : 6.027456183070403,\r\n  \"factorScoreAvgs\" : [ 3.616076749251911, 3.616076749251911 ],\r\n  \"employee\" : {\r\n    \"mode\" : \"normal\",\r\n    \"organization\" : \"Alkalmazás fejlesztés\",\r\n    \"active\" : true,\r\n    \"fullName\" : \"fullName\",\r\n    \"id\" : 342342,\r\n    \"userName\" : \"userName\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"rows\" : [ {\r\n    \"note\" : \"note\",\r\n    \"evaluatorName\" : \"evaluatorName\",\r\n    \"factorScores\" : [ 7.061401241503109, 7.061401241503109 ],\r\n    \"scoreAvg\" : 9.301444243932576\r\n  }, {\r\n    \"note\" : \"note\",\r\n    \"evaluatorName\" : \"evaluatorName\",\r\n    \"factorScores\" : [ 7.061401241503109, 7.061401241503109 ],\r\n    \"scoreAvg\" : 9.301444243932576\r\n  } ],\r\n  \"asLeaderOrganizationScore\" : 5.962133916683182,\r\n  \"factors\" : [ {\r\n    \"id\" : 1,\r\n    \"name\" : \"Kommunikáció\"\r\n  }, {\r\n    \"id\" : 1,\r\n    \"name\" : \"Kommunikáció\"\r\n  } ],\r\n  \"score\" : 0.8008281904610115,\r\n  \"task\" : \"\",\r\n  \"gradeRecommendation\" : \"gradeRecommendation\",\r\n  \"automaticTaskScore\" : 1.4658129805029452,\r\n  \"asLeaderOrganization\" : \"asLeaderOrganization\",\r\n  \"cooperation\" : true\r\n}", ReportEvaluationModel.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ReportV1Api interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
