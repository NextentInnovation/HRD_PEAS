/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package hu.nextent.peas.period.api;

import hu.nextent.peas.model.CreatePeriodModel;
import hu.nextent.peas.model.ErrorMessageModel;
import hu.nextent.peas.model.PeriodModel;
import hu.nextent.peas.model.PeriodPageModel;
import hu.nextent.peas.model.PeriodQueryParameterModel;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@Api(value = "period_v1", description = "the period_v1 API")
public interface PeriodV1Api {

    Logger log = LoggerFactory.getLogger(PeriodV1Api.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }
	

    @ApiOperation(value = "Új periódus létrehozása", nickname = "createPeriod", notes = "Új periódus adatainak mentése.      Ellenőrzés:   - Csak üzleti admin szerepkör férhet hozzá (BUSINESS_ADMIN).    Megadott adatok javítása:   - Ha nincs megadva valamely adat, generálni kell.   - Ha nincs megadva a vége dátum, a minősítés vége dátum is generálásra kerül.   - Vége dátuma az előző periódus minősítés vége dátum utáni. Ha nem így van, a dátumok generálódnak.   - Minősítés vége dátuma a vége dátum utáni. Ha nem így van, generálódik.   - A névnek egyedinek kell lennie. Ha nem így van, úgy generálódik, hogy egyedi legyen.    Működés:   - Adatok alapján új periódus létrehozása.", response = PeriodModel.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "period", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Új periódus létrehozása", response = PeriodModel.class),
        @ApiResponse(code = 204, message = "Nincs válasz"),
        @ApiResponse(code = 200, message = "Általános hibaüzenet", response = ErrorMessageModel.class) })
    @RequestMapping(value = "/period_v1",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<PeriodModel> createPeriod(@ApiParam(value = "" ,required=true )  @Valid @RequestBody CreatePeriodModel body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"ratingEndDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"name\" : \"name\",\r\n  \"id\" : 342342,\r\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"status\" : \"ACTIVE\"\r\n}", PeriodModel.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PeriodV1Api interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Periódus törlése", nickname = "deletePeriod", notes = "Periódus törlése.      Ellenőrzés:   - Csak üzleti admin szerepkör férhet hozzá (BUSINESS_ADMIN).   - Csak a legutolsó jövőbeli periódus törölhető.  Művelet:   - Periódus törlése.", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "period", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sikeres törlés"),
        @ApiResponse(code = 200, message = "Általános hibaüzenet", response = ErrorMessageModel.class) })
    @RequestMapping(value = "/period_v1/{periodId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deletePeriod(@ApiParam(value = "Kiválasztott periódus azonosítója",required=true) @PathVariable("periodId") Long periodId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PeriodV1Api interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Egy periódus lekérdezése", nickname = "getPeriod", notes = "Egy periódus lekérdezése azonosító alapján.      Ellenőrzés:   - Csak üzleti admin szerepkör férhet hozzá (BUSINESS_ADMIN).", response = PeriodModel.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "period", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Periódus lekérdezás", response = PeriodModel.class),
        @ApiResponse(code = 204, message = "Nincs válasz"),
        @ApiResponse(code = 200, message = "Általános hibaüzenet", response = ErrorMessageModel.class) })
    @RequestMapping(value = "/period_v1/{periodId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PeriodModel> getPeriod(@ApiParam(value = "Kiválasztott periódus azonosítója",required=true) @PathVariable("periodId") Long periodId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"ratingEndDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"name\" : \"name\",\r\n  \"id\" : 342342,\r\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"status\" : \"ACTIVE\"\r\n}", PeriodModel.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PeriodV1Api interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Egy periódus módosítása", nickname = "modifyPeriod", notes = "Periódus adatainak mentése.      Ellenőrzés:   - Csak üzleti admin szerepkör férhet hozzá (BUSINESS_ADMIN).    Megadott adatok javítása:   - Csak a periódus állapotának megfelelő adatok változhatnak:     - Jövőbeli: name, vége, minősítés vége     - Aktuális: név, vége (csak jövőbeli lehet), minősítés vége     - Minősítés alatt: név, minősítés vége (csak jövőbeli lehet)     - Lezárt: név   - Ha nincs megadva valamely adat, generálni kell.   - Ha nincs megadva a vége dátum, a minősítés vége dátum is generálásra kerül.   - Vége dátuma az előző periódus minősítés vége dátum utáni. Ha nem így van, a dátumok generálódnak.   - Minősítés vége dátuma a vége dátum utáni. Ha nem így van, generálódik.   - A névnek egyedinek kell lennie. Ha nem így van, úgy generálódik, hogy egyedi legyen.    Működés:   - Adatok alapján periódus mentése.   - Ha változott a minősítés vége dátum, a következő periódusok vége dátumai sorra ellenőrzendőek és módosítandóak, ha korábbi.", response = PeriodModel.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "period", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Periódus lekérdezás", response = PeriodModel.class),
        @ApiResponse(code = 204, message = "Nincs válasz"),
        @ApiResponse(code = 200, message = "Általános hibaüzenet", response = ErrorMessageModel.class) })
    @RequestMapping(value = "/period_v1/{periodId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<PeriodModel> modifyPeriod(@ApiParam(value = "" ,required=true )  @Valid @RequestBody PeriodModel body,@ApiParam(value = "Kiválasztott periódus azonosítója",required=true) @PathVariable("periodId") Long periodId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"ratingEndDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"name\" : \"name\",\r\n  \"id\" : 342342,\r\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"status\" : \"ACTIVE\"\r\n}", PeriodModel.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PeriodV1Api interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Követekező periódus minta lekérdezése", nickname = "periodTemplate", notes = "A periódus létrehozásához az utolsó periódus utánit generáló minta lekérdezése.", response = CreatePeriodModel.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "period", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Minta periódus", response = CreatePeriodModel.class),
        @ApiResponse(code = 200, message = "Általános hibaüzenet", response = ErrorMessageModel.class) })
    @RequestMapping(value = "/period_v1/next",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CreatePeriodModel> periodTemplate() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"ratingEndDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"name\" : \"name\",\r\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}", CreatePeriodModel.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PeriodV1Api interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Periódus lista lekérdezése", nickname = "queryPeriod", notes = "A periódusok adatainak visszaadása szűrhető és rendezhető módon.      Ellenőrzés:   - Csak üzleti admin szerepkör férhet hozzá (BUSINESS_ADMIN).", response = PeriodPageModel.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "period", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Periódus lista lekérdezése", response = PeriodPageModel.class),
        @ApiResponse(code = 204, message = "Nincs válasz"),
        @ApiResponse(code = 200, message = "Általános hibaüzenet", response = ErrorMessageModel.class) })
    @RequestMapping(value = "/period_v1",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<PeriodPageModel> queryPeriod(@ApiParam(value = "" ,required=true )  @Valid @RequestBody PeriodQueryParameterModel body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", PeriodPageModel.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PeriodV1Api interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
